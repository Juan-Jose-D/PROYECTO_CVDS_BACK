package edu.eci.cvds.ReservationProject.service;

import edu.eci.cvds.ReservationProject.model.Reservation;
import edu.eci.cvds.ReservationProject.repository.ReservationRepository;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

/**
 * Servicio para gestionar las reservas en la aplicación.
 */
@Service
public class ReservationService {

    private final ReservationRepository reservationRepository;

    @Autowired
    public ReservationService(ReservationRepository reservationRepository) {
        this.reservationRepository = reservationRepository;
    }

    /**
     * Crea una nueva reserva y la guarda en la base de datos.
     * Valida que no haya conflictos de horario.
     *
     * @param reservation La reserva a crear.
     * @return La reserva guardada.
     */
    public Reservation createReservation(Reservation reservation) {
        List<Reservation> existingReservations = reservationRepository.findByDateAndInitialTimeLessThanEqualAndFinalTimeGreaterThanEqualAndLaboratory(
                reservation.getDate(),
                reservation.getInitialTime(),
                reservation.getFinalTime(),
                reservation.getLaboratory()
        );

        if (!existingReservations.isEmpty()) {
            throw new RuntimeException("El laboratorio ya está reservado en ese horario.");
        }

        reservation.setId(new ObjectId());
        return reservationRepository.save(reservation);
    }

    /**
     * Obtiene todas las reservas registradas.
     *
     * @return Lista de reservas.
     */
    public List<Reservation> getAllReservations() {
        return reservationRepository.findAll();
    }

    /**
     * Busca una reserva por su ID.
     *
     * @param id Identificador de la reserva.
     * @return La reserva encontrada o una excepción si no existe.
     */
    public Reservation getReservationById(ObjectId id) {
        return reservationRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Reserva no encontrada con id: " + id));
    }

    /**
     * Modifica una reserva existente.
     *
     * @param id          Identificador de la reserva a modificar.
     * @param reservation Datos actualizados de la reserva.
     * @return La reserva modificada.
     */
    public Reservation updateReservation(ObjectId id, Reservation reservation) {
        if (!reservationRepository.existsById(id)) {
            throw new RuntimeException("Reserva no encontrada con id: " + id);
        }
        reservation.setId(id);
        return reservationRepository.save(reservation);
    }

    /**
     * Elimina una reserva por su ID.
     *
     * @param id Identificador de la reserva a eliminar.
     */
    public void deleteReservation(ObjectId id) {
        reservationRepository.deleteById(id);
    }
}
