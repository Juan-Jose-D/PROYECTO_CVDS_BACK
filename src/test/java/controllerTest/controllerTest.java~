package controllerTest;

import edu.eci.cvds.ReservationProject.model.*;
import edu.eci.cvds.ReservationProject.service.*;
import edu.eci.cvds.ReservationProject.controller.*;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.junit.jupiter.api.BeforeEach;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class controllerTest {

    @Mock
    private AdminService adminService;

    @Mock
    private LaboratoryService laboratoryService;

    @Mock
    private ReservationService reservationService;

    @Mock
    private UserService userService;

    @InjectMocks
    private AdminController adminController;

    @InjectMocks
    private LaboratoryController laboratoryController;

    @InjectMocks
    private ReservationController reservationController;

    @InjectMocks
    private UserController userController;

    private Laboratory testLab;
    private Reservation testReservation;
    private User testUser;
    private Admin admin;

    @BeforeEach
    void setUp() {
        testLab = new Laboratory(new ObjectId(), "AI Lab", 30, "Building A", "Advanced AI research", true, "PCs, GPUs");
        testReservation = new Reservation(new ObjectId(), "John Doe", null, "10:00", "12:00", true, "Research", testLab);
        testUser = new User(new ObjectId(), "John Doe", "john.doe@example.com", "password123");
        admin = new Admin(new ObjectId(), "Jessica", "jessica@bene-gesserit.com", "litany123");
    }

    @Test
    void testCreateAdmin_Success() {
        when(adminService.createAdmin(any(Admin.class))).thenReturn(admin);

        ResponseEntity<?> response = adminController.createAdmin(admin);

        assertEquals(201, response.getStatusCodeValue());
        assertEquals(admin, response.getBody());
    }

    @Test
    void testCreateAdmin_Conflict() {
        when(adminService.createAdmin(any(Admin.class))).thenThrow(new RuntimeException("Admin already exists"));

        ResponseEntity<?> response = adminController.createAdmin(admin);

        assertEquals(409, response.getStatusCodeValue());
        assertEquals("Admin already exists", response.getBody());
    }

    @Test
    void testGetAllAdmins() {
        List<Admin> admins = Arrays.asList(
                new Admin(new ObjectId(), "Jessica", "jessica@bene-gesserit.com", "litany123"),
                new Admin(new ObjectId(), "Paul", "paul@atreides.com", "dune123")
        );
        when(adminService.getAllAdmins()).thenReturn(admins);

        List<Admin> result = adminController.getAllAdmins();

        assertEquals(2, result.size());
        assertEquals("Jessica", result.get(0).getName());
        assertEquals("Paul", result.get(1).getName());
    }

    @Test
    void testGetAdminById() {
        ObjectId id = new ObjectId();
        when(adminService.getAdminById(id)).thenReturn(admin);

        ResponseEntity<Admin> response = adminController.getLaboratory(id);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(admin, response.getBody());
    }

    @Test
    void testGetAdminByEmail() {
        String email = "jessica@bene-gesserit.com";
        when(adminService.getAdminByEmail(email)).thenReturn(admin);

        ResponseEntity<Admin> response = adminController.getAdminByEmail(email);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(admin, response.getBody());
    }

    @Test
    void testGetAdminByName() {
        String name = "Jessica";
        when(adminService.getAdminByEmail(name)).thenReturn(admin);

        ResponseEntity<Admin> response = adminController.getAdminByName(name);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(admin, response.getBody());
    }

    // LaboratoryController Tests
    @Test
    void testCreateLaboratory_Success() {
        when(laboratoryService.createLaboratory(any(Laboratory.class))).thenReturn(testLab);
        ResponseEntity<?> response = laboratoryController.createLaboratory(testLab);
        assertEquals(201, response.getStatusCodeValue());
        assertEquals(testLab, response.getBody());
    }

    @Test
    void testCreateLaboratory_Conflict() {
        when(laboratoryService.createLaboratory(any(Laboratory.class)))
                .thenThrow(new RuntimeException("Laboratory already exists"));

        ResponseEntity<?> response = laboratoryController.createLaboratory(testLab);

        assertEquals(409, response.getStatusCodeValue());
        assertEquals("Laboratory already exists", response.getBody());
    }

    @Test
    void testGetAllLaboratories() {
        when(laboratoryService.getAllLaboratories()).thenReturn(Arrays.asList(testLab));
        List<Laboratory> labs = laboratoryController.getAllLaboratories();
        assertEquals(1, labs.size());
        assertEquals("AI Lab", labs.get(0).getName());
    }

    @Test
    void testGetLaboratoryById() {
        when(laboratoryService.getLaboratoryById(any())).thenReturn(testLab);
        ResponseEntity<Laboratory> response = laboratoryController.getLaboratory(testLab.getId());
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(testLab, response.getBody());
    }

    // ReservationController Tests
    @Test
    void testCreateReservation_Success() {
        when(reservationService.createReservation(any(Reservation.class))).thenReturn(testReservation);
        ResponseEntity<?> response = reservationController.createReservation(testReservation);
        assertEquals(201, response.getStatusCodeValue());
        assertEquals(testReservation, response.getBody());
    }

    @Test
    void testCreateReservation_Conflict() {
        when(reservationService.createReservation(any(Reservation.class)))
                .thenThrow(new RuntimeException("Reservation already exists"));

        ResponseEntity<?> response = reservationController.createReservation(testReservation);

        assertEquals(409, response.getStatusCodeValue());
        assertEquals("Reservation already exists", response.getBody());
    }

    @Test
    void testGetAllReservations() {
        when(reservationService.getAllReservations()).thenReturn(Arrays.asList(testReservation));
        List<Reservation> reservations = reservationController.getAllReservations();
        assertEquals(1, reservations.size());
        assertEquals("John Doe", reservations.get(0).getUser());
    }

    @Test
    void testDeleteReservation() {
        doNothing().when(reservationService).deleteReservation(any());
        ResponseEntity<Void> response = reservationController.deleteReservation(testReservation.getId());
        assertEquals(204, response.getStatusCodeValue());
    }

    // UserController Tests
    @Test
    void testCreateUser_Success() {
        when(userService.createUser(any(User.class))).thenReturn(testUser);
        ResponseEntity<?> response = userController.createUser(testUser);
        assertEquals(201, response.getStatusCodeValue());
        assertEquals(testUser, response.getBody());
    }

    @Test
    void testCreateUser_Conflict() {
        when(userService.createUser(any(User.class)))
                .thenThrow(new RuntimeException("User already exists"));

        ResponseEntity<?> response = userController.createUser(testUser);

        assertEquals(409, response.getStatusCodeValue());
        assertEquals("User already exists", response.getBody());
    }

    @Test
    void testGetAllUsers() {
        when(userService.getAllUsers()).thenReturn(Arrays.asList(testUser));
        List<User> users = userController.getAllUsers();
        assertEquals(1, users.size());
        assertEquals("John Doe", users.get(0).getName());
    }

    @Test
    void testGetUserById() {
        when(userService.getUserById(any())).thenReturn(testUser);
        ResponseEntity<User> response = userController.getUseryById(testUser.getId());
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(testUser, response.getBody());
    }
}
